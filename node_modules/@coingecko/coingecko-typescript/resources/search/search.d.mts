import { APIResource } from "../../core/resource.mjs";
import * as TrendingAPI from "./trending.mjs";
import { Trending, TrendingGetParams, TrendingGetResponse } from "./trending.mjs";
import { APIPromise } from "../../core/api-promise.mjs";
import { RequestOptions } from "../../internal/request-options.mjs";
export declare class Search extends APIResource {
    trending: TrendingAPI.Trending;
    /**
     * This endpoint allows you to **search for coins, categories and markets listed on
     * CoinGecko**
     *
     * @example
     * ```ts
     * const search = await client.search.get({ query: 'query' });
     * ```
     */
    get(query: SearchGetParams, options?: RequestOptions): APIPromise<SearchGetResponse>;
}
export interface SearchGetResponse {
    categories?: Array<SearchGetResponse.Category>;
    coins?: Array<SearchGetResponse.Coin>;
    exchanges?: Array<SearchGetResponse.Exchange>;
    icos?: Array<string>;
    nfts?: Array<SearchGetResponse.NFT>;
}
export declare namespace SearchGetResponse {
    interface Category {
        /**
         * category ID
         */
        id?: string;
        /**
         * category name
         */
        name?: string;
    }
    interface Coin {
        /**
         * coin ID
         */
        id?: string;
        /**
         * coin api symbol
         */
        api_symbol?: string;
        /**
         * coin large image url
         */
        large?: string;
        /**
         * coin market cap rank
         */
        market_cap_rank?: number;
        /**
         * coin name
         */
        name?: string;
        /**
         * coin symbol
         */
        symbol?: string;
        /**
         * coin thumb image url
         */
        thumb?: string;
    }
    interface Exchange {
        /**
         * exchange ID
         */
        id?: string;
        /**
         * exchange large image url
         */
        large?: string;
        /**
         * exchange market type
         */
        market_type?: string;
        /**
         * exchange name
         */
        name?: string;
        /**
         * exchange thumb image url
         */
        thumb?: string;
    }
    interface NFT {
        /**
         * NFT collection ID
         */
        id?: string;
        /**
         * NFT name
         */
        name?: string;
        /**
         * NFT collection symbol
         */
        symbol?: string;
        /**
         * NFT collection thumb image url
         */
        thumb?: string;
    }
}
export interface SearchGetParams {
    /**
     * search query
     */
    query: string;
}
export declare namespace Search {
    export { type SearchGetResponse as SearchGetResponse, type SearchGetParams as SearchGetParams };
    export { Trending as Trending, type TrendingGetResponse as TrendingGetResponse, type TrendingGetParams as TrendingGetParams, };
}
//# sourceMappingURL=search.d.mts.map