// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
import { APIResource } from "../../core/resource.mjs";
import * as TickersAPI from "./tickers.mjs";
import { Tickers } from "./tickers.mjs";
import * as VolumeChartAPI from "./volume-chart.mjs";
import { VolumeChart, } from "./volume-chart.mjs";
import { path } from "../../internal/utils/path.mjs";
export class Exchanges extends APIResource {
    constructor() {
        super(...arguments);
        this.tickers = new TickersAPI.Tickers(this._client);
        this.volumeChart = new VolumeChartAPI.VolumeChart(this._client);
    }
    /**
     * This endpoint allows you to **query all the supported exchanges with exchanges’
     * data (ID, name, country, ...) that have active trading volumes on CoinGecko**
     *
     * @example
     * ```ts
     * const exchange = await client.exchanges.get();
     * ```
     */
    get(query = {}, options) {
        return this._client.get('/exchanges', { query, ...options });
    }
    /**
     * This endpoint allows you to **query exchange’s data (name, year established,
     * country, ...), exchange volume in BTC and top 100 tickers based on exchange’s
     * ID**
     *
     * @example
     * ```ts
     * const response = await client.exchanges.getID('binance');
     * ```
     */
    getID(id, query = {}, options) {
        return this._client.get(path `/exchanges/${id}`, { query, ...options });
    }
    /**
     * This endpoint allows you to **query all the exchanges with ID and name**
     *
     * @example
     * ```ts
     * const response = await client.exchanges.getList();
     * ```
     */
    getList(query = {}, options) {
        return this._client.get('/exchanges/list', { query, ...options });
    }
}
Exchanges.Tickers = Tickers;
Exchanges.VolumeChart = VolumeChart;
//# sourceMappingURL=exchanges.mjs.map