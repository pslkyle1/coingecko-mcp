"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Exchanges = void 0;
const tslib_1 = require("../../internal/tslib.js");
const resource_1 = require("../../core/resource.js");
const TickersAPI = tslib_1.__importStar(require("./tickers.js"));
const tickers_1 = require("./tickers.js");
const VolumeChartAPI = tslib_1.__importStar(require("./volume-chart.js"));
const volume_chart_1 = require("./volume-chart.js");
const path_1 = require("../../internal/utils/path.js");
class Exchanges extends resource_1.APIResource {
    constructor() {
        super(...arguments);
        this.tickers = new TickersAPI.Tickers(this._client);
        this.volumeChart = new VolumeChartAPI.VolumeChart(this._client);
    }
    /**
     * This endpoint allows you to **query all the supported exchanges with exchanges’
     * data (ID, name, country, ...) that have active trading volumes on CoinGecko**
     *
     * @example
     * ```ts
     * const exchange = await client.exchanges.get();
     * ```
     */
    get(query = {}, options) {
        return this._client.get('/exchanges', { query, ...options });
    }
    /**
     * This endpoint allows you to **query exchange’s data (name, year established,
     * country, ...), exchange volume in BTC and top 100 tickers based on exchange’s
     * ID**
     *
     * @example
     * ```ts
     * const response = await client.exchanges.getID('binance');
     * ```
     */
    getID(id, query = {}, options) {
        return this._client.get((0, path_1.path) `/exchanges/${id}`, { query, ...options });
    }
    /**
     * This endpoint allows you to **query all the exchanges with ID and name**
     *
     * @example
     * ```ts
     * const response = await client.exchanges.getList();
     * ```
     */
    getList(query = {}, options) {
        return this._client.get('/exchanges/list', { query, ...options });
    }
}
exports.Exchanges = Exchanges;
Exchanges.Tickers = tickers_1.Tickers;
Exchanges.VolumeChart = volume_chart_1.VolumeChart;
//# sourceMappingURL=exchanges.js.map