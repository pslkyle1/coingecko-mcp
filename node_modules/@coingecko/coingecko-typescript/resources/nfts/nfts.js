"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
Object.defineProperty(exports, "__esModule", { value: true });
exports.NFTs = void 0;
const tslib_1 = require("../../internal/tslib.js");
const resource_1 = require("../../core/resource.js");
const MarketChartAPI = tslib_1.__importStar(require("./market-chart.js"));
const market_chart_1 = require("./market-chart.js");
const TickersAPI = tslib_1.__importStar(require("./tickers.js"));
const tickers_1 = require("./tickers.js");
const ContractAPI = tslib_1.__importStar(require("./contract/contract.js"));
const contract_1 = require("./contract/contract.js");
const path_1 = require("../../internal/utils/path.js");
class NFTs extends resource_1.APIResource {
    constructor() {
        super(...arguments);
        this.contract = new ContractAPI.Contract(this._client);
        this.marketChart = new MarketChartAPI.MarketChart(this._client);
        this.tickers = new TickersAPI.Tickers(this._client);
    }
    /**
     * This endpoint allows you to **query all the NFT data (name, floor price, 24hr
     * volume ...) based on the NFT collection ID**
     *
     * @example
     * ```ts
     * const response = await client.nfts.getID('pudgy-penguins');
     * ```
     */
    getID(id, options) {
        return this._client.get((0, path_1.path) `/nfts/${id}`, options);
    }
    /**
     * This endpoint allows you to **query all supported NFTs with ID, contract
     * address, name, asset platform ID and symbol on CoinGecko**
     *
     * @example
     * ```ts
     * const response = await client.nfts.getList();
     * ```
     */
    getList(query = {}, options) {
        return this._client.get('/nfts/list', { query, ...options });
    }
    /**
     * This endpoint allows you to **query all the supported NFT collections with floor
     * price, market cap, volume and market related data on CoinGecko**
     *
     * @example
     * ```ts
     * const response = await client.nfts.getMarkets();
     * ```
     */
    getMarkets(query = {}, options) {
        return this._client.get('/nfts/markets', { query, ...options });
    }
}
exports.NFTs = NFTs;
NFTs.Contract = contract_1.Contract;
NFTs.MarketChart = market_chart_1.MarketChart;
NFTs.Tickers = tickers_1.Tickers;
//# sourceMappingURL=nfts.js.map