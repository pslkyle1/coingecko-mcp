// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
import { APIResource } from "../../core/resource.mjs";
import * as MarketChartAPI from "./market-chart.mjs";
import { MarketChart } from "./market-chart.mjs";
import * as TickersAPI from "./tickers.mjs";
import { Tickers } from "./tickers.mjs";
import * as ContractAPI from "./contract/contract.mjs";
import { Contract, } from "./contract/contract.mjs";
import { path } from "../../internal/utils/path.mjs";
export class NFTs extends APIResource {
    constructor() {
        super(...arguments);
        this.contract = new ContractAPI.Contract(this._client);
        this.marketChart = new MarketChartAPI.MarketChart(this._client);
        this.tickers = new TickersAPI.Tickers(this._client);
    }
    /**
     * This endpoint allows you to **query all the NFT data (name, floor price, 24hr
     * volume ...) based on the NFT collection ID**
     *
     * @example
     * ```ts
     * const response = await client.nfts.getID('pudgy-penguins');
     * ```
     */
    getID(id, options) {
        return this._client.get(path `/nfts/${id}`, options);
    }
    /**
     * This endpoint allows you to **query all supported NFTs with ID, contract
     * address, name, asset platform ID and symbol on CoinGecko**
     *
     * @example
     * ```ts
     * const response = await client.nfts.getList();
     * ```
     */
    getList(query = {}, options) {
        return this._client.get('/nfts/list', { query, ...options });
    }
    /**
     * This endpoint allows you to **query all the supported NFT collections with floor
     * price, market cap, volume and market related data on CoinGecko**
     *
     * @example
     * ```ts
     * const response = await client.nfts.getMarkets();
     * ```
     */
    getMarkets(query = {}, options) {
        return this._client.get('/nfts/markets', { query, ...options });
    }
}
NFTs.Contract = Contract;
NFTs.MarketChart = MarketChart;
NFTs.Tickers = Tickers;
//# sourceMappingURL=nfts.mjs.map