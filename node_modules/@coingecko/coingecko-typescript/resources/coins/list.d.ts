import { APIResource } from "../../core/resource.js";
import { APIPromise } from "../../core/api-promise.js";
import { RequestOptions } from "../../internal/request-options.js";
export declare class List extends APIResource {
    /**
     * This endpoint allows you to **query all the supported coins on CoinGecko with
     * coins ID, name and symbol**
     *
     * @example
     * ```ts
     * const lists = await client.coins.list.get();
     * ```
     */
    get(query?: ListGetParams | null | undefined, options?: RequestOptions): APIPromise<ListGetResponse>;
    /**
     * This endpoint allows you to **query the latest 200 coins that recently listed on
     * CoinGecko**
     *
     * @example
     * ```ts
     * const response = await client.coins.list.getNew();
     * ```
     */
    getNew(options?: RequestOptions): APIPromise<ListGetNewResponse>;
}
export type ListGetResponse = Array<ListGetResponse.ListGetResponseItem>;
export declare namespace ListGetResponse {
    interface ListGetResponseItem {
        /**
         * coin ID
         */
        id?: string;
        /**
         * coin name
         */
        name?: string;
        /**
         * coin asset platform and contract address
         */
        platforms?: {
            [key: string]: string;
        };
        /**
         * coin symbol
         */
        symbol?: string;
    }
}
export type ListGetNewResponse = Array<ListGetNewResponse.ListGetNewResponseItem>;
export declare namespace ListGetNewResponse {
    interface ListGetNewResponseItem {
        /**
         * coin ID
         */
        id?: string;
        /**
         * timestamp when coin was activated on CoinGecko
         */
        activated_at?: number;
        /**
         * coin name
         */
        name?: string;
        /**
         * coin symbol
         */
        symbol?: string;
    }
}
export interface ListGetParams {
    /**
     * include platform and token's contract addresses, default: false
     */
    include_platform?: boolean;
    /**
     * filter by status of coins, default: active
     */
    status?: 'active' | 'inactive';
}
export declare namespace List {
    export { type ListGetResponse as ListGetResponse, type ListGetNewResponse as ListGetNewResponse, type ListGetParams as ListGetParams, };
}
//# sourceMappingURL=list.d.ts.map