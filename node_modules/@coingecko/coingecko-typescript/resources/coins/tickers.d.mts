import { APIResource } from "../../core/resource.mjs";
import { APIPromise } from "../../core/api-promise.mjs";
import { RequestOptions } from "../../internal/request-options.mjs";
export declare class Tickers extends APIResource {
    /**
     * This endpoint allows you to **query the coin tickers on both centralized
     * exchange (CEX) and decentralized exchange (DEX) based on a particular coin ID**
     *
     * @example
     * ```ts
     * const ticker = await client.coins.tickers.get('bitcoin');
     * ```
     */
    get(id: string, query?: TickerGetParams | null | undefined, options?: RequestOptions): APIPromise<TickerGetResponse>;
}
export interface TickerGetResponse {
    /**
     * coin name
     */
    name?: string;
    /**
     * list of tickers
     */
    tickers?: Array<TickerGetResponse.Ticker>;
}
export declare namespace TickerGetResponse {
    interface Ticker {
        /**
         * coin ticker base currency
         */
        base?: string;
        /**
         * coin ticker bid ask spread percentage
         */
        bid_ask_spread_percentage?: number;
        /**
         * coin ticker base currency coin ID
         */
        coin_id?: string;
        /**
         * coin ticker converted last price
         */
        converted_last?: Ticker.ConvertedLast;
        /**
         * coin ticker converted volume
         */
        converted_volume?: Ticker.ConvertedVolume;
        /**
         * coin ticker cost to move down in usd
         */
        cost_to_move_down_usd?: number;
        /**
         * coin ticker cost to move up in usd
         */
        cost_to_move_up_usd?: number;
        /**
         * coin ticker anomaly
         */
        is_anomaly?: boolean;
        /**
         * coin ticker stale
         */
        is_stale?: boolean;
        /**
         * coin ticker last price
         */
        last?: number;
        /**
         * coin ticker last fetch timestamp
         */
        last_fetch_at?: string;
        /**
         * coin ticker last traded timestamp
         */
        last_traded_at?: string;
        /**
         * coin ticker exchange
         */
        market?: Ticker.Market;
        /**
         * coin ticker target currency
         */
        target?: string;
        /**
         * coin ticker target currency coin ID
         */
        target_coin_id?: string;
        /**
         * coin ticker timestamp
         */
        timestamp?: string;
        /**
         * coin ticker token info url
         */
        token_info_url?: string | null;
        /**
         * coin ticker trade url
         */
        trade_url?: string;
        /**
         * coin ticker trust score
         */
        trust_score?: string;
        /**
         * coin ticker volume
         */
        volume?: number;
    }
    namespace Ticker {
        /**
         * coin ticker converted last price
         */
        interface ConvertedLast {
            btc?: number;
            eth?: number;
            usd?: number;
        }
        /**
         * coin ticker converted volume
         */
        interface ConvertedVolume {
            btc?: number;
            eth?: number;
            usd?: number;
        }
        /**
         * coin ticker exchange
         */
        interface Market {
            /**
             * exchange trading incentive
             */
            has_trading_incentive: boolean;
            /**
             * exchange identifier
             */
            identifier: string;
            /**
             * exchange name
             */
            name: string;
            /**
             * exchange image url
             */
            logo?: string;
        }
    }
}
export interface TickerGetParams {
    /**
     * include 2% orderbook depth, ie. `cost_to_move_up_usd` and
     * `cost_to_move_down_usd` Default: false
     */
    depth?: boolean;
    /**
     * set to `symbol` to display DEX pair base and target as symbols, default:
     * `contract_address`
     */
    dex_pair_format?: 'contract_address' | 'symbol';
    /**
     * exchange ID \*refers to [`/exchanges/list`](/reference/exchanges-list).
     */
    exchange_ids?: string;
    /**
     * include exchange logo, default: false
     */
    include_exchange_logo?: boolean;
    /**
     * use this to sort the order of responses, default: trust_score_desc
     */
    order?: 'trust_score_desc' | 'trust_score_asc' | 'volume_desc' | 'volume_asc';
    /**
     * page through results
     */
    page?: number;
}
export declare namespace Tickers {
    export { type TickerGetResponse as TickerGetResponse, type TickerGetParams as TickerGetParams };
}
//# sourceMappingURL=tickers.d.mts.map