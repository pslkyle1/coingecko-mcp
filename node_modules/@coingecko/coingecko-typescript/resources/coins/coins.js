"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Coins = void 0;
const tslib_1 = require("../../internal/tslib.js");
const resource_1 = require("../../core/resource.js");
const CategoriesAPI = tslib_1.__importStar(require("./categories.js"));
const categories_1 = require("./categories.js");
const CirculatingSupplyChartAPI = tslib_1.__importStar(require("./circulating-supply-chart.js"));
const circulating_supply_chart_1 = require("./circulating-supply-chart.js");
const HistoryAPI = tslib_1.__importStar(require("./history.js"));
const history_1 = require("./history.js");
const ListAPI = tslib_1.__importStar(require("./list.js"));
const list_1 = require("./list.js");
const MarketChartAPI = tslib_1.__importStar(require("./market-chart.js"));
const market_chart_1 = require("./market-chart.js");
const MarketsAPI = tslib_1.__importStar(require("./markets.js"));
const markets_1 = require("./markets.js");
const OhlcAPI = tslib_1.__importStar(require("./ohlc.js"));
const ohlc_1 = require("./ohlc.js");
const TickersAPI = tslib_1.__importStar(require("./tickers.js"));
const tickers_1 = require("./tickers.js");
const TopGainersLosersAPI = tslib_1.__importStar(require("./top-gainers-losers.js"));
const top_gainers_losers_1 = require("./top-gainers-losers.js");
const TotalSupplyChartAPI = tslib_1.__importStar(require("./total-supply-chart.js"));
const total_supply_chart_1 = require("./total-supply-chart.js");
const ContractAPI = tslib_1.__importStar(require("./contract/contract.js"));
const contract_1 = require("./contract/contract.js");
const path_1 = require("../../internal/utils/path.js");
class Coins extends resource_1.APIResource {
    constructor() {
        super(...arguments);
        this.categories = new CategoriesAPI.Categories(this._client);
        this.list = new ListAPI.List(this._client);
        this.markets = new MarketsAPI.Markets(this._client);
        this.topGainersLosers = new TopGainersLosersAPI.TopGainersLosers(this._client);
        this.circulatingSupplyChart = new CirculatingSupplyChartAPI.CirculatingSupplyChart(this._client);
        this.contract = new ContractAPI.Contract(this._client);
        this.history = new HistoryAPI.History(this._client);
        this.marketChart = new MarketChartAPI.MarketChart(this._client);
        this.ohlc = new OhlcAPI.Ohlc(this._client);
        this.tickers = new TickersAPI.Tickers(this._client);
        this.totalSupplyChart = new TotalSupplyChartAPI.TotalSupplyChart(this._client);
    }
    /**
     * This endpoint allows you to **query all the metadata (image, websites, socials,
     * description, contract address, etc.) and market data (price, ATH, exchange
     * tickers, etc.) of a coin from the CoinGecko coin page based on a particular coin
     * ID**
     *
     * @example
     * ```ts
     * const response = await client.coins.getID('bitcoin');
     * ```
     */
    getID(id, query = {}, options) {
        return this._client.get((0, path_1.path) `/coins/${id}`, { query, ...options });
    }
}
exports.Coins = Coins;
Coins.Categories = categories_1.Categories;
Coins.List = list_1.List;
Coins.Markets = markets_1.Markets;
Coins.TopGainersLosers = top_gainers_losers_1.TopGainersLosers;
Coins.CirculatingSupplyChart = circulating_supply_chart_1.CirculatingSupplyChart;
Coins.Contract = contract_1.Contract;
Coins.History = history_1.History;
Coins.MarketChart = market_chart_1.MarketChart;
Coins.Ohlc = ohlc_1.Ohlc;
Coins.Tickers = tickers_1.Tickers;
Coins.TotalSupplyChart = total_supply_chart_1.TotalSupplyChart;
//# sourceMappingURL=coins.js.map