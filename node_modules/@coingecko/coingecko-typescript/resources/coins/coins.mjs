// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
import { APIResource } from "../../core/resource.mjs";
import * as CategoriesAPI from "./categories.mjs";
import { Categories } from "./categories.mjs";
import * as CirculatingSupplyChartAPI from "./circulating-supply-chart.mjs";
import { CirculatingSupplyChart, } from "./circulating-supply-chart.mjs";
import * as HistoryAPI from "./history.mjs";
import { History } from "./history.mjs";
import * as ListAPI from "./list.mjs";
import { List } from "./list.mjs";
import * as MarketChartAPI from "./market-chart.mjs";
import { MarketChart, } from "./market-chart.mjs";
import * as MarketsAPI from "./markets.mjs";
import { Markets } from "./markets.mjs";
import * as OhlcAPI from "./ohlc.mjs";
import { Ohlc } from "./ohlc.mjs";
import * as TickersAPI from "./tickers.mjs";
import { Tickers } from "./tickers.mjs";
import * as TopGainersLosersAPI from "./top-gainers-losers.mjs";
import { TopGainersLosers } from "./top-gainers-losers.mjs";
import * as TotalSupplyChartAPI from "./total-supply-chart.mjs";
import { TotalSupplyChart, } from "./total-supply-chart.mjs";
import * as ContractAPI from "./contract/contract.mjs";
import { Contract } from "./contract/contract.mjs";
import { path } from "../../internal/utils/path.mjs";
export class Coins extends APIResource {
    constructor() {
        super(...arguments);
        this.categories = new CategoriesAPI.Categories(this._client);
        this.list = new ListAPI.List(this._client);
        this.markets = new MarketsAPI.Markets(this._client);
        this.topGainersLosers = new TopGainersLosersAPI.TopGainersLosers(this._client);
        this.circulatingSupplyChart = new CirculatingSupplyChartAPI.CirculatingSupplyChart(this._client);
        this.contract = new ContractAPI.Contract(this._client);
        this.history = new HistoryAPI.History(this._client);
        this.marketChart = new MarketChartAPI.MarketChart(this._client);
        this.ohlc = new OhlcAPI.Ohlc(this._client);
        this.tickers = new TickersAPI.Tickers(this._client);
        this.totalSupplyChart = new TotalSupplyChartAPI.TotalSupplyChart(this._client);
    }
    /**
     * This endpoint allows you to **query all the metadata (image, websites, socials,
     * description, contract address, etc.) and market data (price, ATH, exchange
     * tickers, etc.) of a coin from the CoinGecko coin page based on a particular coin
     * ID**
     *
     * @example
     * ```ts
     * const response = await client.coins.getID('bitcoin');
     * ```
     */
    getID(id, query = {}, options) {
        return this._client.get(path `/coins/${id}`, { query, ...options });
    }
}
Coins.Categories = Categories;
Coins.List = List;
Coins.Markets = Markets;
Coins.TopGainersLosers = TopGainersLosers;
Coins.CirculatingSupplyChart = CirculatingSupplyChart;
Coins.Contract = Contract;
Coins.History = History;
Coins.MarketChart = MarketChart;
Coins.Ohlc = Ohlc;
Coins.Tickers = Tickers;
Coins.TotalSupplyChart = TotalSupplyChart;
//# sourceMappingURL=coins.mjs.map