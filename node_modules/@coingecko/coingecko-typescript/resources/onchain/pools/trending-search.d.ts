import { APIResource } from "../../../core/resource.js";
import { APIPromise } from "../../../core/api-promise.js";
import { RequestOptions } from "../../../internal/request-options.js";
export declare class TrendingSearch extends APIResource {
    /**
     * This endpoint allows you to **query all the trending search pools across all
     * networks on GeckoTerminal**
     *
     * @example
     * ```ts
     * const trendingSearch =
     *   await client.onchain.pools.trendingSearch.get();
     * ```
     */
    get(query?: TrendingSearchGetParams | null | undefined, options?: RequestOptions): APIPromise<TrendingSearchGetResponse>;
}
export interface TrendingSearchGetResponse {
    data?: Array<TrendingSearchGetResponse.Data>;
    included?: Array<TrendingSearchGetResponse.Included>;
}
export declare namespace TrendingSearchGetResponse {
    interface Data {
        id?: string;
        attributes?: Data.Attributes;
        relationships?: Data.Relationships;
        type?: string;
    }
    namespace Data {
        interface Attributes {
            address?: string;
            fdv_usd?: string;
            market_cap_usd?: string;
            name?: string;
            pool_created_at?: string;
            reserve_in_usd?: string;
            trending_rank?: number;
            volume_usd?: Attributes.VolumeUsd;
        }
        namespace Attributes {
            interface VolumeUsd {
                h24?: string;
            }
        }
        interface Relationships {
            base_token?: Relationships.BaseToken;
            dex?: Relationships.Dex;
            network?: Relationships.Network;
            quote_token?: Relationships.QuoteToken;
        }
        namespace Relationships {
            interface BaseToken {
                data?: BaseToken.Data;
            }
            namespace BaseToken {
                interface Data {
                    id?: string;
                    type?: string;
                }
            }
            interface Dex {
                data?: Dex.Data;
            }
            namespace Dex {
                interface Data {
                    id?: string;
                    type?: string;
                }
            }
            interface Network {
                data?: Network.Data;
            }
            namespace Network {
                interface Data {
                    id?: string;
                    type?: string;
                }
            }
            interface QuoteToken {
                data?: QuoteToken.Data;
            }
            namespace QuoteToken {
                interface Data {
                    id?: string;
                    type?: string;
                }
            }
        }
    }
    interface Included {
        id?: string;
        attributes?: Included.Attributes;
        type?: string;
    }
    namespace Included {
        interface Attributes {
            address?: string;
            coingecko_coin_id?: string;
            decimals?: number;
            image_url?: string;
            name?: string;
            symbol?: string;
        }
    }
}
export interface TrendingSearchGetParams {
    /**
     * attributes to include, comma-separated if more than one to include Available
     * values: `base_token`, `quote_token`, `dex`, `network`
     */
    include?: string;
    /**
     * number of pools to return, maximum 10 Default value: 4
     */
    pools?: number;
}
export declare namespace TrendingSearch {
    export { type TrendingSearchGetResponse as TrendingSearchGetResponse, type TrendingSearchGetParams as TrendingSearchGetParams, };
}
//# sourceMappingURL=trending-search.d.ts.map