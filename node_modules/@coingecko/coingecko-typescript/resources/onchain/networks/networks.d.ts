import { APIResource } from "../../../core/resource.js";
import * as DexesAPI from "./dexes.js";
import { DexGetParams, DexGetPoolsParams, DexGetPoolsResponse, DexGetResponse, Dexes } from "./dexes.js";
import * as NewPoolsAPI from "./new-pools.js";
import { NewPoolGetNetworkParams, NewPoolGetNetworkResponse, NewPoolGetParams, NewPoolGetResponse, NewPools } from "./new-pools.js";
import * as TrendingPoolsAPI from "./trending-pools.js";
import { TrendingPoolGetNetworkParams, TrendingPoolGetNetworkResponse, TrendingPoolGetParams, TrendingPoolGetResponse, TrendingPools } from "./trending-pools.js";
import * as PoolsAPI from "./pools/pools.js";
import { PoolGetAddressParams, PoolGetAddressResponse, PoolGetParams, PoolGetResponse, Pools } from "./pools/pools.js";
import * as TokensAPI from "./tokens/tokens.js";
import { TokenGetAddressParams, TokenGetAddressResponse, Tokens } from "./tokens/tokens.js";
import { APIPromise } from "../../../core/api-promise.js";
import { RequestOptions } from "../../../internal/request-options.js";
export declare class Networks extends APIResource {
    newPools: NewPoolsAPI.NewPools;
    trendingPools: TrendingPoolsAPI.TrendingPools;
    dexes: DexesAPI.Dexes;
    pools: PoolsAPI.Pools;
    tokens: TokensAPI.Tokens;
    /**
     * This endpoint allows you to **query all the supported networks on
     * GeckoTerminal**
     *
     * @example
     * ```ts
     * const network = await client.onchain.networks.get();
     * ```
     */
    get(query?: NetworkGetParams | null | undefined, options?: RequestOptions): APIPromise<NetworkGetResponse>;
}
export interface NetworkGetResponse {
    data?: Array<NetworkGetResponse.Data>;
}
export declare namespace NetworkGetResponse {
    interface Data {
        id?: string;
        attributes?: Data.Attributes;
        type?: string;
    }
    namespace Data {
        interface Attributes {
            coingecko_asset_platform_id?: string;
            name?: string;
        }
    }
}
export interface NetworkGetParams {
    /**
     * page through results Default value: 1
     */
    page?: number;
}
export declare namespace Networks {
    export { type NetworkGetResponse as NetworkGetResponse, type NetworkGetParams as NetworkGetParams };
    export { NewPools as NewPools, type NewPoolGetResponse as NewPoolGetResponse, type NewPoolGetNetworkResponse as NewPoolGetNetworkResponse, type NewPoolGetParams as NewPoolGetParams, type NewPoolGetNetworkParams as NewPoolGetNetworkParams, };
    export { TrendingPools as TrendingPools, type TrendingPoolGetResponse as TrendingPoolGetResponse, type TrendingPoolGetNetworkResponse as TrendingPoolGetNetworkResponse, type TrendingPoolGetParams as TrendingPoolGetParams, type TrendingPoolGetNetworkParams as TrendingPoolGetNetworkParams, };
    export { Dexes as Dexes, type DexGetResponse as DexGetResponse, type DexGetPoolsResponse as DexGetPoolsResponse, type DexGetParams as DexGetParams, type DexGetPoolsParams as DexGetPoolsParams, };
    export { Pools as Pools, type PoolGetResponse as PoolGetResponse, type PoolGetAddressResponse as PoolGetAddressResponse, type PoolGetParams as PoolGetParams, type PoolGetAddressParams as PoolGetAddressParams, };
    export { Tokens as Tokens, type TokenGetAddressResponse as TokenGetAddressResponse, type TokenGetAddressParams as TokenGetAddressParams, };
}
//# sourceMappingURL=networks.d.ts.map