// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
import { APIResource } from "../../../core/resource.mjs";
import * as DexesAPI from "./dexes.mjs";
import { Dexes } from "./dexes.mjs";
import * as NewPoolsAPI from "./new-pools.mjs";
import { NewPools, } from "./new-pools.mjs";
import * as TrendingPoolsAPI from "./trending-pools.mjs";
import { TrendingPools, } from "./trending-pools.mjs";
import * as PoolsAPI from "./pools/pools.mjs";
import { Pools, } from "./pools/pools.mjs";
import * as TokensAPI from "./tokens/tokens.mjs";
import { Tokens } from "./tokens/tokens.mjs";
export class Networks extends APIResource {
    constructor() {
        super(...arguments);
        this.newPools = new NewPoolsAPI.NewPools(this._client);
        this.trendingPools = new TrendingPoolsAPI.TrendingPools(this._client);
        this.dexes = new DexesAPI.Dexes(this._client);
        this.pools = new PoolsAPI.Pools(this._client);
        this.tokens = new TokensAPI.Tokens(this._client);
    }
    /**
     * This endpoint allows you to **query all the supported networks on
     * GeckoTerminal**
     *
     * @example
     * ```ts
     * const network = await client.onchain.networks.get();
     * ```
     */
    get(query = {}, options) {
        return this._client.get('/onchain/networks', { query, ...options });
    }
}
Networks.NewPools = NewPools;
Networks.TrendingPools = TrendingPools;
Networks.Dexes = Dexes;
Networks.Pools = Pools;
Networks.Tokens = Tokens;
//# sourceMappingURL=networks.mjs.map