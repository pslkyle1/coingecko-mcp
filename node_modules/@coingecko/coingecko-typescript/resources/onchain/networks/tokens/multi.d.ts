import { APIResource } from "../../../../core/resource.js";
import { APIPromise } from "../../../../core/api-promise.js";
import { RequestOptions } from "../../../../internal/request-options.js";
export declare class Multi extends APIResource {
    /**
     * This endpoint allows you to **query multiple tokens data based on the provided
     * token contract addresses on a network**
     *
     * @example
     * ```ts
     * const response =
     *   await client.onchain.networks.tokens.multi.getAddresses(
     *     'addresses',
     *     { network: 'eth' },
     *   );
     * ```
     */
    getAddresses(addresses: string, params: MultiGetAddressesParams, options?: RequestOptions): APIPromise<MultiGetAddressesResponse>;
}
export interface MultiGetAddressesResponse {
    data?: Array<MultiGetAddressesResponse.Data>;
}
export declare namespace MultiGetAddressesResponse {
    interface Data {
        id?: string;
        attributes?: Data.Attributes;
        relationships?: Data.Relationships;
        type?: string;
    }
    namespace Data {
        interface Attributes {
            address?: string;
            coingecko_coin_id?: string;
            decimals?: number;
            fdv_usd?: string;
            image_url?: string;
            market_cap_usd?: string;
            name?: string;
            normalized_total_supply?: string;
            price_usd?: string;
            symbol?: string;
            total_reserve_in_usd?: string;
            total_supply?: string;
            volume_usd?: Attributes.VolumeUsd;
        }
        namespace Attributes {
            interface VolumeUsd {
                h24?: string;
            }
        }
        interface Relationships {
            top_pools?: Relationships.TopPools;
        }
        namespace Relationships {
            interface TopPools {
                data?: Array<TopPools.Data>;
            }
            namespace TopPools {
                interface Data {
                    id?: string;
                    type?: string;
                }
            }
        }
    }
}
export interface MultiGetAddressesParams {
    /**
     * Path param: network ID \*refers to [/networks](/reference/networks-list)
     */
    network: string;
    /**
     * Query param: attributes to include
     */
    include?: 'top_pools';
}
export declare namespace Multi {
    export { type MultiGetAddressesResponse as MultiGetAddressesResponse, type MultiGetAddressesParams as MultiGetAddressesParams, };
}
//# sourceMappingURL=multi.d.ts.map