import { APIResource } from "../../../../core/resource.js";
import * as HoldersChartAPI from "./holders-chart.js";
import { HoldersChart, HoldersChartGetParams, HoldersChartGetResponse } from "./holders-chart.js";
import * as InfoAPI from "./info.js";
import { Info, InfoGetParams, InfoGetResponse } from "./info.js";
import * as MultiAPI from "./multi.js";
import { Multi, MultiGetAddressesParams, MultiGetAddressesResponse } from "./multi.js";
import * as OhlcvAPI from "./ohlcv.js";
import { Ohlcv, OhlcvGetTimeframeParams, OhlcvGetTimeframeResponse } from "./ohlcv.js";
import * as PoolsAPI from "./pools.js";
import { PoolGetParams, PoolGetResponse, Pools } from "./pools.js";
import * as TopHoldersAPI from "./top-holders.js";
import { TopHolderGetParams, TopHolderGetResponse, TopHolders } from "./top-holders.js";
import * as TradesAPI from "./trades.js";
import { TradeGetParams, TradeGetResponse, Trades } from "./trades.js";
import { APIPromise } from "../../../../core/api-promise.js";
import { RequestOptions } from "../../../../internal/request-options.js";
export declare class Tokens extends APIResource {
    multi: MultiAPI.Multi;
    info: InfoAPI.Info;
    topHolders: TopHoldersAPI.TopHolders;
    holdersChart: HoldersChartAPI.HoldersChart;
    ohlcv: OhlcvAPI.Ohlcv;
    pools: PoolsAPI.Pools;
    trades: TradesAPI.Trades;
    /**
     * This endpoint allows you to **query specific token data based on the provided
     * token contract address on a network**
     *
     * @example
     * ```ts
     * const response =
     *   await client.onchain.networks.tokens.getAddress(
     *     '0xdac17f958d2ee523a2206206994597c13d831ec7',
     *     { network: 'eth' },
     *   );
     * ```
     */
    getAddress(address: string, params: TokenGetAddressParams, options?: RequestOptions): APIPromise<TokenGetAddressResponse>;
}
export interface TokenGetAddressResponse {
    data?: TokenGetAddressResponse.Data;
    included?: Array<TokenGetAddressResponse.Included>;
}
export declare namespace TokenGetAddressResponse {
    interface Data {
        id?: string;
        attributes?: Data.Attributes;
        relationships?: Data.Relationships;
        type?: string;
    }
    namespace Data {
        interface Attributes {
            address?: string;
            coingecko_coin_id?: string;
            decimals?: number;
            fdv_usd?: string;
            image_url?: string;
            market_cap_usd?: string;
            name?: string;
            normalized_total_supply?: string;
            price_usd?: string;
            symbol?: string;
            total_reserve_in_usd?: string;
            total_supply?: string;
            volume_usd?: Attributes.VolumeUsd;
        }
        namespace Attributes {
            interface VolumeUsd {
                h24?: string;
            }
        }
        interface Relationships {
            top_pools?: Relationships.TopPools;
        }
        namespace Relationships {
            interface TopPools {
                data?: Array<TopPools.Data>;
            }
            namespace TopPools {
                interface Data {
                    id?: string;
                    type?: string;
                }
            }
        }
    }
    interface Included {
        id?: string;
        attributes?: Included.Attributes;
        relationships?: Included.Relationships;
        type?: string;
    }
    namespace Included {
        interface Attributes {
            address?: string;
            base_token_price_native_currency?: string;
            base_token_price_quote_token?: string;
            base_token_price_usd?: string;
            fdv_usd?: string;
            market_cap_usd?: string;
            name?: string;
            pool_created_at?: string;
            price_change_percentage?: Attributes.PriceChangePercentage;
            quote_token_price_base_token?: string;
            quote_token_price_native_currency?: string;
            quote_token_price_usd?: string;
            reserve_in_usd?: string;
            token_price_usd?: string;
            transactions?: Attributes.Transactions;
            volume_usd?: Attributes.VolumeUsd;
        }
        namespace Attributes {
            interface PriceChangePercentage {
                h1?: string;
                h24?: string;
                h6?: string;
                m15?: string;
                m30?: string;
                m5?: string;
            }
            interface Transactions {
                h1?: Transactions.H1;
                h24?: Transactions.H24;
                m15?: Transactions.M15;
                m30?: Transactions.M30;
                m5?: Transactions.M5;
            }
            namespace Transactions {
                interface H1 {
                    buyers?: number;
                    buys?: number;
                    sellers?: number;
                    sells?: number;
                }
                interface H24 {
                    buyers?: number;
                    buys?: number;
                    sellers?: number;
                    sells?: number;
                }
                interface M15 {
                    buyers?: number;
                    buys?: number;
                    sellers?: number;
                    sells?: number;
                }
                interface M30 {
                    buyers?: number;
                    buys?: number;
                    sellers?: number;
                    sells?: number;
                }
                interface M5 {
                    buyers?: number;
                    buys?: number;
                    sellers?: number;
                    sells?: number;
                }
            }
            interface VolumeUsd {
                h1?: string;
                h24?: string;
                h6?: string;
                m15?: string;
                m30?: string;
                m5?: string;
            }
        }
        interface Relationships {
            base_token?: Relationships.BaseToken;
            dex?: Relationships.Dex;
            quote_token?: Relationships.QuoteToken;
        }
        namespace Relationships {
            interface BaseToken {
                data?: BaseToken.Data;
            }
            namespace BaseToken {
                interface Data {
                    id?: string;
                    type?: string;
                }
            }
            interface Dex {
                data?: Dex.Data;
            }
            namespace Dex {
                interface Data {
                    id?: string;
                    type?: string;
                }
            }
            interface QuoteToken {
                data?: QuoteToken.Data;
            }
            namespace QuoteToken {
                interface Data {
                    id?: string;
                    type?: string;
                }
            }
        }
    }
}
export interface TokenGetAddressParams {
    /**
     * Path param: network ID \*refers to [/networks](/reference/networks-list)
     */
    network: string;
    /**
     * Query param: attributes to include
     */
    include?: 'top_pools';
}
export declare namespace Tokens {
    export { type TokenGetAddressResponse as TokenGetAddressResponse, type TokenGetAddressParams as TokenGetAddressParams, };
    export { Multi as Multi, type MultiGetAddressesResponse as MultiGetAddressesResponse, type MultiGetAddressesParams as MultiGetAddressesParams, };
    export { Info as Info, type InfoGetResponse as InfoGetResponse, type InfoGetParams as InfoGetParams };
    export { TopHolders as TopHolders, type TopHolderGetResponse as TopHolderGetResponse, type TopHolderGetParams as TopHolderGetParams, };
    export { HoldersChart as HoldersChart, type HoldersChartGetResponse as HoldersChartGetResponse, type HoldersChartGetParams as HoldersChartGetParams, };
    export { Ohlcv as Ohlcv, type OhlcvGetTimeframeResponse as OhlcvGetTimeframeResponse, type OhlcvGetTimeframeParams as OhlcvGetTimeframeParams, };
    export { Pools as Pools, type PoolGetResponse as PoolGetResponse, type PoolGetParams as PoolGetParams };
    export { Trades as Trades, type TradeGetResponse as TradeGetResponse, type TradeGetParams as TradeGetParams, };
}
//# sourceMappingURL=tokens.d.ts.map