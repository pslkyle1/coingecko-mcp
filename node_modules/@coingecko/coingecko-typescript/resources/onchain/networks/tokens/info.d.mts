import { APIResource } from "../../../../core/resource.mjs";
import { APIPromise } from "../../../../core/api-promise.mjs";
import { RequestOptions } from "../../../../internal/request-options.mjs";
export declare class Info extends APIResource {
    /**
     * This endpoint allows you to **query token metadata (name, symbol, CoinGecko ID,
     * image, socials, websites, description, etc.) based on a provided token contract
     * address on a network**
     *
     * @example
     * ```ts
     * const info = await client.onchain.networks.tokens.info.get(
     *   '0xdac17f958d2ee523a2206206994597c13d831ec7',
     *   { network: 'eth' },
     * );
     * ```
     */
    get(address: string, params: InfoGetParams, options?: RequestOptions): APIPromise<InfoGetResponse>;
}
export interface InfoGetResponse {
    data?: InfoGetResponse.Data;
}
export declare namespace InfoGetResponse {
    interface Data {
        id?: string;
        attributes?: Data.Attributes;
        type?: string;
    }
    namespace Data {
        interface Attributes {
            address?: string;
            categories?: Array<string>;
            coingecko_coin_id?: string;
            description?: string;
            discord_url?: string;
            freeze_authority?: string;
            gt_categories_id?: Array<string>;
            gt_score?: number;
            gt_score_details?: Attributes.GtScoreDetails;
            holders?: Attributes.Holders;
            image?: Attributes.Image;
            image_url?: string;
            mint_authority?: string;
            name?: string;
            symbol?: string;
            telegram_handle?: string;
            twitter_handle?: string;
            websites?: Array<string>;
        }
        namespace Attributes {
            interface GtScoreDetails {
                creation?: number;
                holders?: number;
                info?: number;
                pool?: number;
                transaction?: number;
            }
            interface Holders {
                count?: number;
                distribution_percentage?: Holders.DistributionPercentage;
                last_updated?: string;
            }
            namespace Holders {
                interface DistributionPercentage {
                    '11_30'?: number;
                    '31_50'?: number;
                    rest?: number;
                    top_10?: number;
                }
            }
            interface Image {
                large?: string;
                small?: string;
                thumb?: string;
            }
        }
    }
}
export interface InfoGetParams {
    /**
     * network ID \*refers to [/networks](/reference/networks-list)
     */
    network: string;
}
export declare namespace Info {
    export { type InfoGetResponse as InfoGetResponse, type InfoGetParams as InfoGetParams };
}
//# sourceMappingURL=info.d.mts.map