import { APIResource } from "../../../../core/resource.js";
import { APIPromise } from "../../../../core/api-promise.js";
import { RequestOptions } from "../../../../internal/request-options.js";
export declare class Pools extends APIResource {
    /**
     * This endpoint allows you to **query top pools based on the provided token
     * contract address on a network**
     *
     * @example
     * ```ts
     * const pool = await client.onchain.networks.tokens.pools.get(
     *   '0xdac17f958d2ee523a2206206994597c13d831ec7',
     *   { network: 'eth' },
     * );
     * ```
     */
    get(tokenAddress: string, params: PoolGetParams, options?: RequestOptions): APIPromise<PoolGetResponse>;
}
export interface PoolGetResponse {
    data?: Array<PoolGetResponse.Data>;
    included?: Array<PoolGetResponse.Included>;
}
export declare namespace PoolGetResponse {
    interface Data {
        id?: string;
        attributes?: Data.Attributes;
        relationships?: Data.Relationships;
        type?: string;
    }
    namespace Data {
        interface Attributes {
            address?: string;
            base_token_price_native_currency?: string;
            base_token_price_quote_token?: string;
            base_token_price_usd?: string;
            fdv_usd?: string;
            market_cap_usd?: string;
            name?: string;
            pool_created_at?: string;
            price_change_percentage?: Attributes.PriceChangePercentage;
            quote_token_price_base_token?: string;
            quote_token_price_native_currency?: string;
            quote_token_price_usd?: string;
            reserve_in_usd?: string;
            transactions?: Attributes.Transactions;
            volume_usd?: Attributes.VolumeUsd;
        }
        namespace Attributes {
            interface PriceChangePercentage {
                h1?: string;
                h24?: string;
                h6?: string;
                m15?: string;
                m30?: string;
                m5?: string;
            }
            interface Transactions {
                h1?: Transactions.H1;
                h24?: Transactions.H24;
                m15?: Transactions.M15;
                m30?: Transactions.M30;
                m5?: Transactions.M5;
            }
            namespace Transactions {
                interface H1 {
                    buyers?: number;
                    buys?: number;
                    sellers?: number;
                    sells?: number;
                }
                interface H24 {
                    buyers?: number;
                    buys?: number;
                    sellers?: number;
                    sells?: number;
                }
                interface M15 {
                    buyers?: number;
                    buys?: number;
                    sellers?: number;
                    sells?: number;
                }
                interface M30 {
                    buyers?: number;
                    buys?: number;
                    sellers?: number;
                    sells?: number;
                }
                interface M5 {
                    buyers?: number;
                    buys?: number;
                    sellers?: number;
                    sells?: number;
                }
            }
            interface VolumeUsd {
                h1?: string;
                h24?: string;
                h6?: string;
                m15?: string;
                m30?: string;
                m5?: string;
            }
        }
        interface Relationships {
            base_token?: Relationships.BaseToken;
            dex?: Relationships.Dex;
            quote_token?: Relationships.QuoteToken;
        }
        namespace Relationships {
            interface BaseToken {
                data?: BaseToken.Data;
            }
            namespace BaseToken {
                interface Data {
                    id?: string;
                    type?: string;
                }
            }
            interface Dex {
                data?: Dex.Data;
            }
            namespace Dex {
                interface Data {
                    id?: string;
                    type?: string;
                }
            }
            interface QuoteToken {
                data?: QuoteToken.Data;
            }
            namespace QuoteToken {
                interface Data {
                    id?: string;
                    type?: string;
                }
            }
        }
    }
    interface Included {
        id?: string;
        attributes?: Included.Attributes;
        type?: string;
    }
    namespace Included {
        interface Attributes {
            address?: string;
            coingecko_coin_id?: string;
            decimals?: number;
            image_url?: string;
            name?: string;
            symbol?: string;
        }
    }
}
export interface PoolGetParams {
    /**
     * Path param: network ID \*refers to [/networks](/reference/networks-list)
     */
    network: string;
    /**
     * Query param: attributes to include, comma-separated if more than one to include
     * Available values: `base_token`, `quote_token`, `dex`
     */
    include?: string;
    /**
     * Query param: page through results Default value: 1
     */
    page?: number;
    /**
     * Query param: sort the pools by field Default value:
     * h24_volume_usd_liquidity_desc
     */
    sort?: 'h24_volume_usd_liquidity_desc' | 'h24_tx_count_desc' | 'h24_volume_usd_desc';
}
export declare namespace Pools {
    export { type PoolGetResponse as PoolGetResponse, type PoolGetParams as PoolGetParams };
}
//# sourceMappingURL=pools.d.ts.map